<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<script>

		let debug = true; // Show log messages in console.

		// Set PROXY_URL to false to not use proxy if AJAX request fails.
		let PROXY_URL = "/proxy?url=";

		// Will use server list at ./all.txt if found 
		let SERVER_LIST = "all.txt";

		// Show all servers if SERVER_LIST if ./all.txt not found
		let SERVER_LIST_FALLBACK = 
			"https://raw.githubusercontent.com/hapi-server/servers/master/all_.txt";

		let devNote = "";
		if (location.href.match("hapi-server.org/servers-dev")) {
			SERVER_LIST = "all-dev.txt";
			devNote  = "Testing server.";
			devNote += " Production server is at <a href='//hapi-server.org/servers/'>hapi-server.org/servers/</a>."
		} else if (location.href.match("hapi-server.org/servers")) {
			SERVER_LIST = SERVER_LIST_FALLBACK;
		}

		if (!debug) {
			// Suppress console logging.
			console = {};console.log = function() {};
		}
		</script>

		<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
		<meta name="keywords" content="HAPI Heliophysics Data UI">
		<meta name="description"
			content="HAPI Server UI; https://github.com/hapi-server/server-ui">
		<title>HAPI Browser</title>
		<link rel="icon"
			href="http://hapi-server.org/favicon.ico" type="image/x-icon">

		<link rel="stylesheet"
			type="text/css" href="css/jquery-ui-1.9.2.custom.css"/>
		<link rel="stylesheet"
			type="text/css" href="css/highlight-10.0.0-github.css"/>
		<link rel="stylesheet" 
			type="text/css" href="css/tooltipster.bundle.min.css"/>
		<link rel="stylesheet" 
			type="text/css" href="css/tooltipster-sideTip-noir.min.css"/>

		<link rel="stylesheet" href="css/index.css">

		<script type="text/javascript" 
			src="js/deps/jquery-1.8.3.min.js"></script>
		<script type="text/javascript"
			src="js/deps/jquery-ui-1.9.2.custom.patched.js"></script>
		<script type="text/javascript"
			src="js/deps/jquery.ba-hashchange-1.3.js"></script>
		<script type="text/javascript"
			src="js/deps/tooltipster.bundle.min.js"></script>

		<script type="text/javascript"
			src="js/deps/highlight-10.0.0.min.js"></script>
		<script type="text/javascript" charset="UTF-8" 
			src="js/deps/highlight-10.0.0-python.min.js"></script>
		<script type="text/javascript" charset="UTF-8" 
			src="js/deps/highlight-10.0.0-matlab.min.js"></script>
		<script>
			hljs.initHighlightingOnLoad();
			hljs.getLanguage('python').keywords += ' hapiplot hapiclient hapi';
			hljs.getLanguage('matlab').keywords += ' hapiplot hapiclient hapi';
			hljs.getLanguage('javascript').keywords += ' dataset parameters';
		</script>

		<script src="js/deps/dayjs-1.8.29/dayjs.min.js"></script>
		<script src="js/deps/dayjs-1.8.29/duration.js"></script>
		<script>
			dayjs.extend(window.dayjs_plugin_duration);
			dayjs().format();
		</script>

		<script type="text/javascript" src="js/deps/clipboard.min.js"></script>

		<script type="text/javascript" src="js/parseQueryString.js"></script>
		<script type="text/javascript" src="js/checkboxes.js"></script>
		<script type="text/javascript" src="js/dropdowns.js"></script>
		<script type="text/javascript" src="js/examplelist.js"></script>

		<script>

			// TODO: Catch and report uncaught errors.
			// window.onerror = function (message, filename, linenumber) {
			//	$('#xstatus.append').message();}

			var qs = parseQueryString();

			console.log('Query string:');
			console.log(qs);

			var SERVER_LIST_HASH = "";
			if (qs['server']) {
				if (qs['server'].startsWith('http://') || qs['server'].startsWith('https://')) {
					console.log("Server given in hash: " + qs['server']);
					SERVER_LIST_HASH = qs['server'].split(",").join("\n");
				}
			}

			$(function() {
				main(); // DOM is loaded. Start execution.
			})

			function main() {

				$('#infodiv').append("<p><span style='background-color:yellow'>" + devNote + "</span></p>");
				$('.tooltip').tooltipster({theme: 'tooltipster-noir'})

				// https://github.com/iamceege/tooltipster/issues/558#issuecomment-221627061
				$('body')
					.on('mouseenter','.tooltip:not(.tooltipstered)', 
						function () {
							$(this)
								.tooltipster({theme: 'tooltipster-noir'})
								.tooltipster('show');
						});

				// Bind events to changes in the hash part of the URL
				hashchange();

				$('#clear')
					.show()
					.on('click',
							function () {
								// Remove hash
								window.location = window.location.pathname;
							});

				// Bind events to changes in checkbox state.
				checkboxes();

				// Set up main drop-downs. When Servers drop-down is set
				// the function servers() is called.
				dropdowns(
					[
						"server","dataset","parameters","start",
						"stop","return","format","type","style"
					],
					[
						"Servers","Datasets","Parameters","Start",
						"Stop","Return","Format","Type","Style"
					],
					[
						servers,datasets,parameters,starttime,
						stoptime,returntype,format,type,style
					],
					[
						["Enter text to narrow list","Show full list"],
						[],
						[],
						[],	
						[],
						[],
						[],
						[],
						[]
					],
					"#dropdowns");

				// Set up examples drop-down.
				dropdowns(["examples"],["Examples"],[examples],[],"#examples");

			}

			// Monitor hash for changes via text entry in address bar.
			function hashchange() {

				// Update drop-downs when URL is changed manually.
				console.log("hashchange(): Binding hashchange.");
				$(window).hashchange.byurledit = true;

				$(window).bind("hashchange", function() {

					$('#xstatus').empty();
					// Need to figure out what parameter was changed and then
					// remove all parameters after that. Otherwise user could
					// change the server and the parameter list will not be
					// updated.
					console.log("hashchange(): Hash change; by urledit = "
								+ $(window).hashchange.byurledit);
					var qs = parseQueryString();

					for (var id in qs) {
						console.log("hashchange(): id in query string = " + qs[id]);
						var val = $('#' + id).parent().parent().attr('value');
						console.log("hashchange(): id selected value  = " + val);
						if (qs[id] !== val) {
							console.log('hashchange(): value changed in ' 
										+ qs['id'] + " dropdown.");
						}
					}

					if ($(window).hashchange.byurledit) {
						console.log("hashchange(): Hash change made by manual edit");
						console.log("hashchange(): Last hash:")
						console.log(qs);
						for (var id in qs) {
							console.log("hashchange(): Triggering: " + qs[id]);
							// This does not work in jquery-ui 1.12.1
							$("#" + id)
								.val(qs[id])
								.data("autocomplete")
								._trigger("select",event,{item:qs[id]});
						}
					}					
					$(window).hashchange.byurledit = true;
				});	
			}

			function ajaxerror(url, message, xhr) {
				let errmsg = xhr.responseText || xhr.statusText;
				$('#xstatus').show().html(
					"<div class='error'>Error encountered when attempting to retrieve "
					+ "<a target='_blank' href='" + url + "'>"
					+ url.replace("&para","&#38;para")+"</a>"
					+ ".<br><br>Message: <pre>" + message + "</pre>"
					+ "<p>The Javascript debugger console may have a more descriptive error message.</p></div>");
				// Determining if CORS is cause of error is difficult:
				// https://stackoverflow.com/q/19325314
				console.log("ajaxerror():");
				console.log(xhr);
			}	

			function get(options, cb) {

				console.log("get(): Options:")
				console.log(options);

				var url = options.url;

				var tryProxy = options.tryProxy || true;
				if (!url.startsWith("http")) {
					tryProxy = false;
				}					

				var showAjaxError = options.showAjaxError || false;

				var directURLFailed = options.directURLFailed || false;

				var urlo = url;
				if (tryProxy && PROXY_URL && directURLFailed) {
					url = PROXY_URL + encodeURIComponent(url);
				}

				// Client-side cache of response.
				if (typeof(get.cache) === "undefined") {
					get.cache = {};
				}
				if (get.cache[urlo]) {
					console.log("get(): Client-side cache hit.");
					cb(get.cache[urlo]);
					return;
				}

				console.log("get(): Requesting " + url);
				console.log("get(): tryProxy = " + tryProxy);
				console.log("get(): directURLFailed = " + directURLFailed);
				console.log("get(): PROXY_URL = " + PROXY_URL);
				console.log("get(): showAjaxError = " + showAjaxError);

				$("#loading")
						.html("Requesting " + link(url.replace("&param","&amp;param")) + " ")
						.show()

				// Append ● every 0.5 s
				main.getDots = setInterval( 
									() => $("#loading").append("●"), 500);

				$.ajax({
					type: "GET",
					url: url,
					async: true,
					dataType: "text",
					success: function (data, textStatus, jqXHR) {
						clearInterval(main.getDots);
						$("#loading").empty();
						//console.log("get(): Response from " + url + ":");
						//console.log(data);
						get.cache[urlo] = data; // Cache response.
						cb(false, data);
					},
					error: function (xhr, textStatus, errorThrown) {
						if (tryProxy && directURLFailed == false && PROXY_URL) {
							var opts = {
											url: url,
											directURLFailed: true,
											tryProxy: false,
											showAjaxError: true
										};
							console.log("get(): Attempting to proxy retrieve " + url);
							clearInterval(main.getDots);
							$("#loading").empty();
							get(opts, cb);
						} else {
							if (showAjaxError) {
								var message = "";
								if (directURLFailed && PROXY_URL) {
									message = "Failed to retrieve\n" + urlo + "\nand\n" + url;
								} else {
									message = "Failed to retrieve " + url;
								}
								ajaxerror(url, message, xhr);
							}
							clearInterval(main.getDots);
							$("#loading").empty();
							cb("Error", null);
						}
					}
				});
			}

			// Determine selected value for a drop-down.	
			function selected(name) {

				clearInterval(main.getDots);

				// When drop-down value is selected, URL should be up-to-date.
				// Use value in URL.
				if (location.hash !== "") {
					var qs = parseQueryString();
					if (qs[name]) {
						return qs[name];
					}
				}
				return $("span[name='"+name+"']").attr('value');
			}

			// Create a HTML link.
			function link(url, text) {
				if (arguments.length > 1) {
					return "<a target='_blank' title='" 
								+ url + "' href='" 
								+ url + "'>" 
								+ text + "</a>";
				} else {
					return "<a target='_blank' title='" 
								+ url + "' href='" 
								+ url + "'>" 
								+ url + "</a>";
				}
			}

			function downloadlink(url, what, showdots) {

				$("#downloadlink")
					.empty()
					.append(
						"<span>" 
						+ link(url, "Download " + what) 
						+ "</span>")
					.show();
				$("#downloadlink > span > a")
							.css('font-weight', 'bold');
	
				if (showdots) {
					$("#loading")
						.text("Loading " + what + " ")
					let interval = setInterval( 
										() => $("#loading").append("●"), 500);
					return interval;
				}
			}

			// Handle servers drop-down.
			function servers(cb) {

				servers.onselect = function () {

					console.log('servers.onselect(): Called.');

					$('#overviewinfo').hide();
					$('#output').hide();
					$('#serverinfo').nextAll().hide();

					let url = servers.info[selected('server')]['url'];
					let text = "Server URL";
					$('#serverinfo ul').empty();
					$('#serverinfo ul').append(
										'<li>Server URL: ' + link(url) + '</li>');
					let email = servers.info[selected('server')]['contactEmail'];
					if (servers.info[selected('server')]['contactName'] !== "") {
						$('#serverinfo ul').append(
							'<li>Server Contact: ' 
							+ servers.info[selected('server')]['contactName'] 
							+ " &lt;"
							+ link("mailto:" + email + "?subject=" + url,email)
							+ "&gt;"
							+ '</li>');
					}

					$('#serverinfo').show();
				};

				console.log('servers(): Called.');

				if (SERVER_LIST_HASH !== "") {
					console.log('servers(): Server list given in hash as URL.')
					process(SERVER_LIST_HASH);
				} else {
					get({url: SERVER_LIST, showAjaxError: false}, function (err, res) {

						if (err) {
							console.log("Did not find " 
								+ SERVER_LIST + ".\n"
								+ "Trying fall-back of " + SERVER_LIST_FALLBACK);
							var warning = 'Did not find ' 
											+ SERVER_LIST + ". Will use " 
											+ SERVER_LIST_FALLBACK
							$('#infodiv').append("<span style='background-color:yellow'>" + warning + "</span>");
							SERVER_LIST = SERVER_LIST_FALLBACK;
							get({url: SERVER_LIST}, function (err, res) {
								if (!err) {
									process(res);
								}	
							});
							return;					
						}

						process(res);			

					});
				}

				function process(res) {

					res = res.replace(/,$/,"").split("\n");
					// Remove empty lines
					res = res.filter(x => x !== ""); 

					let list = [];
					let info = {};
					for (let i = 0; i < res.length; i++) {
						if (res[i].substring(0,1) === "#") {
							continue;
						}
						let id, name;
						if (res[i].split(",").length == 1) {
							// Only URL given. Will occur with SERVER_LIST_HASH given.
							id = res[i].split(',')[0].trim()
							name = id;
							info[id] = {};
							info[id]['url'] = id;
							info[id]['contactName'] = "";
							info[id]['contactEmail'] = "";
							info[id]['contactName'] = "";
						} else {
							id = res[i].split(',')[1].trim();
							name = res[i].split(',')[2].trim();
							info[id] = {};
							info[id]['url'] = res[i].split(',')[0].trim();
							info[id]['contactName'] = res[i].split(',')[3].trim();
							info[id]['contactEmail'] = res[i].split(',')[4].trim();
							if (info[id]['contactName'] == info[id]['contactEmail']) {
								info[id]['contactName'] = '';
							}
						}

						if (qs['server'] === id) {
							console.log("servers(): server value for " 
										+ id 
										+ " found in hash. Will select it.")
						}
						list.push({
							"label": name,
							"value": id, 
							selected: qs['server'] === id
						});
					}
					$('#overviewinfo > ul').append(
								'<li>' 
								+ (list.length) 
								+ " servers available.</li>");
					servers.info = info;
					cb(list);
				}
			}

			// Handle datasets drop-down.
			function datasets(cb) {

				datasets.onselect = function () {
					console.log('datasets.onselect(): Called.');

					$('#output').hide();
					$('#datasetinfo').nextAll().hide();

					let url = servers.info[selected('server')]['url'] 
								+ "/info?id=" + selected('dataset');
					$('#datasetinfo ul').empty();
					$('#datasetinfo').show();
				};

				console.log('datasets(): Called.');

				let url = servers.info[selected('server')]['url'] + "/catalog";
				get({url: url}, function (err, res) {
					if (err) {
						return;
					}
					res = $.parseJSON(res);
					res = res.catalog;
					// Show number of datasets
					let plural = res.length > 1 ? "s" : "";
					$('#serverinfo ul').append(
										'<li>' 
										+ (res.length) 
										+ ' dataset' + plural + '</li>');
					let info = {};
					let list = [];
					for (var i = 0; i < res.length; i++) {
						info[res[i]['id']] = {};
						for (key of Object.keys(res[i])) {
							info[res[i]['id']][key] = res[i][key];
						}
						if (qs['dataset'] === res[i]['id']) {
							console.log("datasets(): dataset value for " 
										+ res[i]['id'] 
										+ " found in hash. Will select it.")
						}
						var title = res[i]['id'];
						if (res[i]['title']) {
							title = "<code style='font-size:80%'>[" + res[i]['id'] + "]</code> " + res[i]['title'];
						}
						list.push({
							"label": title,
							"value": res[i]['id'], 
							selected: qs['dataset'] === res[i]['id']
						});
					}
					datasets.info = info;
					cb(list);
				});
			}
			
			// Handle parameters drop-down.			
			function parameters(cb) {

				console.log('parameters(): Called.');

				parameters.clearfollowing = function () {
					if (selected('return')) {
						output();
						return false;
					} else {
						return true;
					}
				}	

				parameters.onselect = function () {

					console.log('parameters.onselect(): Called.');

					$('#parameterinfo').nextAll().hide();
					$('#output').hide();
					$('#parameterinfo ul').empty();

					if (0) {
						if (selected('parameters') === '*all*') {
							alert('*all* selected');
							// Loop through all parameters and create bulleted list.
						}
					}

					let meta = parameters.info[selected('parameters')];

					let url = servers.info[selected('server')]['url'] 
								+ "/info?id=" + selected('dataset') 
								+ "&parameters=" + selected('parameters');
					for (key of Object.keys(meta)) {
						if (key !== "bins") {
							$('#parameterinfo ul').append(""
									+ '<li>' + key 
									+ ": " + JSON.stringify(meta[key]) 
									+ '</li>');
						}
					}

					$('#parameterinfo ul')
						.append('<li>' 
								+ '<a id="parameterjson" title=' + url + '>'
								+ 'HAPI JSON for parameter'
								+ '</a>'
								+ '</li>');

					(function(url) {$('#parameterjson').click(() => output(url));})(url)

					$('#parameterinfo').show();
				};

				let url = servers.info[selected('server')]['url'] 
							+ "/info?id=" 
							+ selected('dataset');

				get({url: url}, function (err, res) {

					if (err) {
						return;
					}
					res = JSON.parse(res);//$.parseJSON(res);
					if (res['resourceURL']) {
						$('#datasetinfo ul').append('<li>' 
							+ link(res['resourceURL'], 
										"Dataset documentation or metadata") 
							+ '</li>');
					}
					if (res['contact']) {
						$('#datasetinfo ul').append(
												'<li>Dataset contact: ' 
												+ res['contact']
												+ '</li>');
					}

					// Show number of parameters
					$('#datasetinfo ul')
						.append(""
								+ "<li>"
								+ (res.parameters.length) 
								+ " parameters</li>");

					$('#datasetinfo ul')
						.append('<li>Start: ' + res['startDate'] + '</li>');
					$('#datasetinfo ul')
						.append('<li>Stop: ' + res['stopDate'] + '</li>');


					let cadence = res['cadence'] || "not given";
					$('#datasetinfo ul')
						.append('<li>Cadence: ' 
								+ cadence
									.replace("PT","")
									.replace("D"," days, ") 
									.replace("H"," hours, ") 
									.replace("M"," minutes, ") 
									.replace("S"," seconds")
									.replace(/, $/,"")
									.replace("1 days", "1 day")
									.replace("1 hours", "1 hour")
									.replace("1 minutes", "1 minute")
									.replace("1 seconds", "1 second")
								+ '</li>');

					var description = res['description'];
					if (/\\n/.test(description)) {
						// Preserve formatting in description.
						description = "<pre>" + description.replace("\\n", "<br/>") + "</pre>";

					}
					$('#datasetinfo ul')
						.append('<li>Description: ' + description + '</li>');

					$('#datasetinfo ul')
						.append('<li>' 
								+ '<a id="datasetjson" title=' + url + '>'
								+ 'HAPI JSON for dataset'
								+ '</a>'
								+ '</li>');

					(function(url) {$('#datasetjson').click(() => output(url));})(url)

					datasets.info[selected('dataset')]['info'] = res;

					res = res.parameters;

					let info = {};
					let list = [];
					for (var k = 0; k < res.length; k++) {
						info[res[k]['name']] = {};
						for (key of Object.keys(res[k])) {
							info[res[k]['name']][key] = res[k][key];
						}
						if (qs['parameters'] === res[k]['name']) {
							console.log("parameters(): parameter value for " 
										+ name 
										+ " found in hash. Will select it.")
						}
						list.push({
							"label": res[k]['label'] || res[k]['name'],
							"value": res[k]['name'], 
							"selected": qs['parameters'] === res[k]['name']
						});
					}

					if (0) {
						list.unshift({
										"label": "*All*",
										"value": "*all*",
										"selected": qs['parameters'] === "*all*"
									});
					}

					datasets.info[selected('dataset')]['info']['parameters'] = info;
					parameters.info = info;
					parameters.list = list;

					cb(list);
				});	
			}

			// Handle start time drop-down.
			function starttime(cb) {

				console.log('starttime(): Called.');

				starttime.clearfollowing = function () {
					if (selected('return')) {
						output();
						return false;
					} else {
						return true;
					}
				}	
				starttime.onselect = function () {};

				let meta = datasets.info[selected('dataset')]['info'];				
				let start = meta['sampleStartDate'];
				let stop = meta['sampleStopDate'];

				list = [{}];
				if (qs['start'] !== undefined) {
					list[0].label = qs['start'];
					list[0].value = qs['start'];
				} else if (start && stop) {
					list[0].label = start;
					list[0].value = start;
				} else {
					list[0].label = meta['startDate'];
					list[0].value = meta['startDate'];
				}
				cb(list);
			}

			// Handle stop time drop-down.			
			function stoptime(cb) {

				console.log('stoptime(): Called.');

				stoptime.clearfollowing = function () {
					if (selected('return')) {
						output();
						return false;
					} else {
						return true;
					}
				}

				stoptime.onselect = function () {};

				let meta = datasets.info[selected('dataset')]['info'];				
				let start = meta['sampleStartDate'];
				let stop = meta['sampleStopDate'];

				list = [{}];
				if (qs['stop'] !== undefined) {
					list[0].label = qs['stop'];
					list[0].value = qs['stop'];
					cb(list);
					return;
				}

				if (start && stop) {
					list[0].label = stop;
					list[0].value = stop;
					cb(list);
					return;
				}

				start = meta['startDate'];
				let cadenceString = meta['cadence'] || "PT1M";
				let cadenceMillis = dayjs.duration(cadenceString)['$ms'];

				if (cadenceMillis <= 100) { // 0.1 s or less
					stop = dayjs(start).add(1,'minute');					
				} else if (cadenceMillis <= 1000*10) { // 10 s or less
					stop = dayjs(start).add(1,'hour').toISOString();
				} else if (cadenceMillis <= 1000*60) { // 1 min or less
					stop = dayjs(start).add(2,'day').toISOString();
				} else if (cadenceMillis <= 1000*60*10) { // 10 min or less
					stop = dayjs(start).add(4,'day').toISOString();
				} else if (cadenceMillis <= 1000*60*60) { // 1 hr or less
					stop = dayjs(start).add(10,'day').toISOString();
				} else if (cadenceMillis <= 1000*60*60*24) { // 1 day or less
					stop = dayjs(start).add(31,'day').toISOString();
				} else if (cadenceMillis <= 1000*60*60*24*10) { // 10 days or less
					stop = dayjs(start).add(1,'year').toISOString();
				} else if  (cadenceMillis <= 1000*60*60*24*100) { // 100 days or less
					stop = dayjs(start).add(10,'year');
				} else {
					stop = meta['stopDate'];
				}

				list[0].label = stop;
				list[0].value = stop;

				cb(list);
			}
			
			// Handle return drop-down.
			function returntype(cb) {

				format.clearfollowing = function () {
					if (selected('return')) {
						output();
						return false;
					} else {
						return true;
					}
				}
				returntype.onselect = function () {};

				var values = 
							[
								{label:"Data", value:"data"},
								{label:"Image", value:"image"},
								{label:"Script", value:"script"}
							];
				for (var i = 0; i < values.length; i++) {
					if (qs['return'] === values[i]['value']) {
						values[i]['selected'] = true;
					}
				}
				cb(values);
			}

			// Handle format drop-down.
			function format(cb) {

				console.log('format(): Called.');

				format.clearfollowing = function () {
					if (selected('type')) {
						output();
						return false;
					} else {
						return true;
					}
				}

				format.onselect = function () {
					$('#output').children().hide();

					if (selected("return") === "image" 
						|| selected("return") === "script"
						|| selected("format") === "json") {
						output();
					}
				};

				if (selected("return").match("data")) {
					var values = 
								[
									{label:"CSV", value:"csv"},
									{label:"JSON", value:"json"}
								];
				}
				if (selected("return").match("image")) {
					var values =
								[
									{label:"SVG",value:"svg"},
									{label:"PNG",value:"png"},
									{label:"PDF",value:"pdf"},
									{label:"Gallery",value:"gallery"}
								];
				}
				if (selected("return").match("script")) {
					var values =
								[
									{label:"IDL",value:"idl"},
									{label:"MATLAB",value:"matlab"},
									{label:"Python",value:"python"},
									{label:"Autoplot",value:"autoplot"}
								];
				}

				for (var i = 0; i < values.length; i++) {
					if (qs['format'] === values[i]['value']) {
						values[i]['selected'] = true;
					}
				}
				cb(values);
			}

			// Handle type drop-down.
			function type(cb) {

				console.log('type(): Called.');

				type.clearfollowing = function () {
					if (selected('style')) {
						output();
						return false;
					} else {
						return true;
					}
				}

				type.onselect = function () {};

				var values = [];
				if (false && selected("return").match("image")) {
					values = 
							[
								{
									label: "Time Series", 
									value: "timeseries", 
									selected: true
								}
							];
				}
				cb(values);
			}

			// Handle style drop-down.
			function style(cb) {

				console.log('type(): Called.');

				style.onselect = function () {
					output();
				}

				var values = [];
				if (false && selected("return") === "image") {
					values = 
						[
							{label: "None/Black/Blue", value: "0", selected: true},
							{label: "Black/Yellow/Yellow", value: "1"},
							{label: "Sparkline", value: "2"}
						];
				}

				if (selected("return") === "data") {
					var values = [];						
					if (selected('format') == 'csv') {
						var values = 
							[
								{
									label: "No Header",
									value: "noheader",
									selected: true
								},
								{label: "Header", value: "header"}
							];
					}
				}
				for (var i = 0; i < values.length; i++) {
					if (qs['style'] === values[i]['value']) {
						values[i]['selected'] = true;
					}
				}
				cb(values);
			}

			// Examples drop-down.
			function examples(cb) {

				console.log('examples(): Called.');

				examples.onselect = function () {
					vid = $("#examples0").attr('value');
					console.log("Example " + vid + " selected");

					// Find example corresponding to vid.
					for (var k = 0; k < examples.list.length; k++) {
						if (examples.list[k].value === vid) {
							break;
						}
					}
					$(window).unbind("hashchange");
					location.hash = examples.list[k].value;
					location.reload();
				};
				var list = examplelist(); // Function defined in examplelist.js.
				examples.list = list;
				cb(list);
			}

			// Form URL and place it in DOM based on drop-down state.
			function output(jsonURL) {

				console.log('output(): Called.')

				let selectedParameters = selected('parameters');
				if (0) {
					if (selectedParameters === '*all*') {
						selectedParameters = "";
					}
				}

				if (jsonURL) {
					let interval = downloadlink(jsonURL, "json", true);
					$.ajax({
						type: "GET",
						url: jsonURL,
						async: true,
						dataType: "json",
						success: function (data, textStatus, jqXHR) {
							showText(JSON.stringify(data,null,4),'','json')
							clearInterval(interval);
							$("#loading").empty();
						},
						error: function (xhr, textStatus, errorThrown) {
							clearInterval(interval);
							$("#loading").empty();
							$('#downloadlink').empty();
							ajaxerror(jsonURL, "Failed to retrieve " + url, xhr);
						}
					});
					return;		
				}

				if (selected('return').match(/script/)) {
					let cclass = '';
					let ext = '';
					if (selected('format') === 'python') {
						cclass = 'python';
						ext = 'py';
					}
					if (selected('format') === 'matlab') {
						cclass = 'matlab';
						ext = 'm';
					}
					if (selected('format') === 'autoplot') {
						cclass = 'python';
						ext = 'jy';
					}
					if (selected('format') === 'idl') {
						cclass = 'matlab';
						ext = 'pro';
					}

					script(cclass, selected('format') + "." + ext, 
						function (sText) {showText(sText,cclass,ext)})

				} else if (selected('return').match(/data/)) {

					parameterString = "&parameters=" + selectedParameters
					let url = servers.info[selected('server')]['url'] 
								+ "/data?id=" + selected('dataset')
								+ parameterString
								+ "&time.min=" + selected('start')
								+ "&time.max=" + selected('stop')

					if (selected('format') === 'csv') {
						if (selected('style') === 'header') {
							url = url + "&include=header";
						}
					}
					if (selected('format') === 'json') {
						url = url + "&format=json";
					}

					$('#output').show();

					if (!$("#showdata").prop('checked')) {
						downloadlink(url, "data", false);
						return;
					}

					downloadlink(url, "data", false);

					get({url: url}, function (err, data) {
						$("#downloadlink")
							.append("<pre class='data'>" + data + "</pre>");
						$("#downloadlink > pre")
							.width($("#infodiv").width()-15)
							.height($(window).height()/2)	
						$("#downloadlink").show();					
					});

				} else if (selected('return').match(/image/)) {

					url = "http://hapi-server.org/plot"
							+ "?server=" + servers.info[selected('server')]['url']
							+ "&id=" + selected('dataset')
							+ "&parameters=" + selectedParameters
							+ "&time.min=" + selected('start')
							+ "&time.max=" + selected('stop')
							+ "&format=" + selected('format')
							+ "&usecache=" + $("#useimagecache").prop('checked')

					$('#output').show();

					if (selected('format').match(/png|svg/)) {

						main.imageDots = downloadlink(url,selected('format'),true);

						$("#image")
							.empty()
							.append("<img></img>")
							.find('img')
							.attr('src',url)
							.parent()
							.show()
							.find('img')
							.width($("#infodiv").width()-15)
							.load( () => {
								clearInterval(main.imageDots);
								$("#loading").empty();
							})
					}
					if (selected('format').match(/pdf/)) {

						let interval = downloadlink(url, 'pdf', true);

						$("#image")
							.empty()
							.append("<iframe></iframe>")
							.find('iframe')
							.attr('frameborder',0)
							.attr('scrolling','no')
							.attr('src',url)
							.width('0')
							.height('0')
							.parent()
							.show()

						$('#image > iframe').load(function () {
							clearInterval(interval);
							$("#loading").empty();
							let w = $("#infodiv").width()-15
							$('#image > iframe')
								.width(w)
								.height(w*3/7+30) 
							// Defaut hapiplot is 7x3 image. Add 30 for PDF
							// controls.
	
						})
					}
					if (selected('format').match(/gallery/)) {
						$("#downloadlink")
							.empty()
							.append(
								"<span>" 
								+ link(url, "View gallery", true) 
								+ "</span>")
							.show();
						$("#downloadlink > span > a")
									.css('font-weight', 'bold');
					}
				
				}

				function script(lang,templateFile,cb) {

					$.ajax({
						type: "GET",
						url: "scripts/" + templateFile,
						async: true,
						dataType: "text",
						success: function (data, textStatus, jqXHR) {
							process_(data);
						}
					});

					function process_(sText) {
						let email = servers.info[selected('server')]['contactEmail']
						sText = sText.replace(/CONTACT/gm,email);

						let selectedParameters = selected('parameters');
						if (0) {
							if (selectedParameters === '*all*') {
								selectedParameters = "";
							}
						}

						function isDoubleByte(str) {
							// https://stackoverflow.com/a/148613
							for (var i = 0, n = str.length; i < n; i++) {
								if (str.charCodeAt( i ) > 255) { return true; }
							}
							return false;
						}

						let unicodeNote = " contains Unicode UTF-8. See https://github.com/hapi-server/client-matlab/blob/master/README.md#notes.";
						let unicodeNoteDataset = "";
						let unicodeNoteParameters = "";
						if (isDoubleByte(selected('dataset'))) {
							unicodeNoteDataset = "Dataset name" + unicodeNote;
						}
						if (isDoubleByte(selectedParameters)) {
							unicodeNoteParameters = "One or more parameters"
												+ unicodeNote;							
						}
						sText = sText.replace(/UNICODE_NOTE_DATASET/gm,unicodeNoteDataset);
						sText = sText.replace(/UNICODE_NOTE_PARAMETERS/gm,unicodeNoteParameters);

						let server = servers.info[selected('server')]['url']
						sText = sText.replace(/SERVER/gm,server);
						sText = sText.replace(/DATASET/gm,selected('dataset'));
						sText = sText.replace(/PARAMETERS/gm,selectedParameters);
						sText = sText.replace(/START/gm,selected('start'));
						sText = sText.replace(/STOP/gm,selected('stop'));
						sText = sText.replace(/STOP/gm,selected('stop'));

						let timename = parameters.list[0]['value'];
						sText = sText.replace(/TIMENAME/gm,timename);

						let p = parameters.list.slice(0); // copy 
						
						p.forEach((el,i) => {p[i] = el.value});
						if (p.length == 1) {
							sText = sText.replace(/CSV_EXAMPLE/gm,'.');
						} else if (p.length == 2) {
							sText = sText.replace(/CSV_EXAMPLE/gm,
													", e.g., parameters='" 
													+ p.join(','));
						} else {
							sText = sText.replace(/CSV_EXAMPLE/gm,
													", e.g., parameters='" 
													+ p.slice(1,3).join(',') + "'");
						}
						cb(sText);
					}
				}

				function showText(sText,cclass,ext) {
					$('#scriptcopy > button')
						.attr("data-clipboard-text",sText)
					$('#scriptcopy').show()

					var clipboard = new ClipboardJS('.btn');
					clipboard.on('success', function () {
						console.log('Copied script to clipboard.');
						$('#copied').tooltipster('open');
						setTimeout(() => $('#copied').tooltipster('close'), 800);
					});

					let type = "script";
					let fname = 'demo';
					if (ext === 'json') {
						type = 'json';
						fname = 'hapi';
					}

					let h = '100%';
					if (type === 'json') {
						h = $(window).height()/2;
					}					
					let w = $("#infodiv").width()-15
					$("#scripttext")
						.empty()
						.append(
							"<pre class='text'></pre>")
						.show()
					
					$("#scripttext > pre")
						.append("<code class='" + cclass + "'>" 
							+ sText.replace('&param','&amp;param')
							+ "</code>")


					$("#scripttext > pre")
						.height(h)
						.show();

					let blob = new Blob([sText], {type: 'octet/stream'});
					let scriptFile = window.URL.createObjectURL(blob);
					//let scriptFile = 'data:text/plain;base64;charset=utf-8,' + btoa(sText);

					//https://stackoverflow.com/a/30139435
					var el = document.createElement('a');
					el.setAttribute('href', scriptFile);
					el.setAttribute('download', fname + "." + ext);
					window.URL.revokeObjectURL(scriptFile);

					$("#downloadlink").empty().append(el).show();
					$("#downloadlink > a")
						.html('Download ' + type)
						.css('font-weight', 'bold');

					document
						.querySelectorAll('pre code')
						.forEach((block) => {hljs.highlightBlock(block);});
					$("#output").show();
				}
			}

		</script>
		
	</head>

	<body>
		<div id="options">
			<div id="cacheoptions">
				<a id="cachecheckboxeslink">
					Options
				</a>
			</div>
			<div id="cachecheckboxes" style="display:none">
				<font size="-1">
					<div class="tooltip" title="When requesting data, show data in broswer.">
						<input id="showdata" type="checkbox" value=""/>
							&nbsp;Show data
					</div>
					<div class="tooltip" title="Use cached metadata in browser if available.">
						<input id="usemetadatacache" type="checkbox" value=""/>
							&nbsp;Use cached metadata
					</div>
					<div class="tooltip" title="Use cached images from plot server if available.">
						<input id="useimagecache" type="checkbox" value=""/>
							&nbsp;Use cached images
					</div>
				</font>
			</div>
			<span id="dropdowns0" class="dropdown"></span>
			<span id="dropdowns1" class="dropdown"></span>
			<span id="dropdowns2" class="dropdown"></span>
			<span id="dropdowns3" class="dropdown"></span>
			<span id="dropdowns4" class="dropdown"></span>
			<span id="dropdowns5" class="dropdown"></span>
			<span id="dropdowns6" class="dropdown"></span>
			<span id="dropdowns7" class="dropdown"></span>
			<span id="dropdowns8" class="dropdown"></span>
			<button id="clear" class='simple' type="button" title="re-set drop-downs">
				Clear
			</button>
		</div>

		<div id="infodiv">
			<div id="xstatus">
			</div>
			<div id="loading" style="height: 2.5em;"></div>
			<div id="overviewinfo">
			  <b>Overview</b>
			  <p>
			    The Heliophysics Data Application Programmer's Interface (HAPI) specification is a time series download and streaming format specification.

			    When data are available from a HAPI server, there is no need to download data files and write custom file reader programs. Using a HAPI client library, data can be loaded into an array using a single command in IDL, MATLAB, and Python.
			  </p>
			  <ul>
			    <li>
			      Use this interface to 
			      <ul>
				<li>generate a 
				  <a class="tooltip" title="Heliphysics Data Application Interface: http://hapi-server.org/" href="http://hapi-server.org/">HAPI</a> 
				  URL to download data,
				</li>
				<li>
				  plot data from a HAPI server, and
				</li>
				<li>generate
				  <a title="https://github.com/hapi-server/client-idl" href="https://github.com/hapi-server/client-idl">IDL</a>
				  /<a title="https://github.com/hapi-server/client-matlab" href="https://github.com/hapi-server/client-matlab">MATLAB</a>
				  /<a title="https://github.com/hapi-server/client-python" href="https://github.com/hapi-server/client-python">Python</a> scripts that read and plot the selected parameter.
				</li>
			      </ul>
			    </li>
			    <li>
			      Begin by selecting a HAPI data server on the left or selecting an example set of selections below.
			    </li>
			  </ul>
			  <div id="examplelist">
			    <span id="examples0"></span>
			  </div>
			</div>
			<div id="output" style="display:none;">
				<div id="downloadlink" style="display:none;">
				</div>

				<div id="scriptcopy"
					class='tooltip' 
					title='Copy to clipboard'
					alt='Copy to clipboard'>
					<button type="button" class="btn tooltip" style="padding:0px;" data-clipboard-text="">
						<img class='clippy'	width='20px' src='css/clippy.png' />
					</button>
					<span id="copied" class="tooltip" title="Copied!"></span>
				</div>

				<div id="scripttext">
				</div>

				<div id="image" style="display:none;">
				</div>
			</div>
			<div id="serverinfo" style="display:none;">
				<b>Server information</b>
				<ul>
				</ul>
			</div>
			<div id="datasetinfo" style="display:none;">
				<b>Dataset information</b>
				<ul>
				</ul>
			</div>
			<div id="parameterinfo" style="display:none;">
				<b>Parameter information</b>
				<ul>
				</ul>
			</div>
		</div>
	</body>
	
</html>
